#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <math.h>
int applyOperator(int a, int b, char op) {
    switch (op) {
        case '+': return a + b;
        case '-': return a - b;
        case '*': return a * b;
        case '/': return a / b;
        case '^': return pow(a, b);  // Exponentiation
        default: return 0;
    }
}
int precedence(char op) {
    if (op == '+' || op == '-') return 1;
    if (op == '*' || op == '/') return 2;
    if (op == '^') return 3;
    return 0;  // for '('
}
int evaluateExpression(char* expression) {
    int values[100], valIndex = 0;
    char operators[100], opIndex = 0;
    int i;

    for (i = 0; expression[i]; i++) {
        // Skip spaces
        if (expression[i] == ' ')
            continue;

        // If current character is a number, push it to values stack
        if (isdigit(expression[i])) {
            int num = 0;
            while (isdigit(expression[i])) {
                num = num * 10 + (expression[i] - '0');
                i++;
            }
            values[valIndex++] = num;
            i--;  // Step back as loop will increase i
        }

        // If current character is '(', push to operators stack
        else if (expression[i] == '(') {
            operators[opIndex++] = expression[i];
        }
        else if (expression[i] == ')') {
            while (opIndex > 0 && operators[opIndex - 1] != '(') {
                int b = values[--valIndex];
                int a = values[--valIndex];
                char op = operators[--opIndex];
                values[valIndex++] = applyOperator(a, b, op);
            }
            // Pop the '(' from the stack
            opIndex--;
        }
        else {
            while (opIndex > 0 && precedence(operators[opIndex - 1]) >= precedence(expression[i])) {
                int b = values[--valIndex];
                int a = values[--valIndex];
                char op = operators[--opIndex];
                values[valIndex++] = applyOperator(a, b, op);
            }
            operators[opIndex++] = expression[i];
        }
    }
    while (opIndex > 0) {
        int b = values[--valIndex];
        int a = values[--valIndex];
        char op = operators[--opIndex];
        values[valIndex++] = applyOperator(a, b, op);
    }
    return values[0];
}

int main() {
    char expression[100];
    printf("Enter an expression (e.g., 3 + 5 * 2 ^ 2 - ( 8 / 4 )):\n");
    fgets(expression, sizeof(expression), stdin);
    
    int result = evaluateExpression(expression);
    
    printf("The result of the expression is: %d\n", result);
    
    return 0;
}
